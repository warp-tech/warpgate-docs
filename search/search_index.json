{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"#animation-container-home { margin: auto; max-width: 500px; } The last bastion. Secure access / PAM for your internal SSH, HTTPS, MySQL and Postgres servers with SSO and RBAC. No client apps needed. Read the docs \u2193 Download GitHub No client Warpgate directly exposes native SSH, HTTPS, MySQL and Postgres listeners. Use it as a git proxy. Connect your gRPC service through it. Set it as your DATABASE_URL . No jump hosts Warpgate handles authentication, and then transparently forwards the connection to the target server, while making a live recording for auditing. No paid plan Warpgate is 100% open-source, free and will stay this way forever. Warpgate is financed through support contracts, and custom-order feature development. This allows it to escape the otherwise inevitable cycle of stagnation or VC enshittification. Pro Support \u2192 No SaaS bullshit Warpgate is a single binary (or a Docker image) that you download and run locally on your own hardware. How does all this work? You download and run a single binary or a Docker container: You add your services: You add your users and decide who can access what: (OIDC SSO supported) Your users get a specially formatted username to connect to targets: $ ssh c.wilde:staging-env@warpgate.acme.inc Warpgate Selected target: staging-env Warpgate Host key (ssh-ed25519): AAAAC3[...] \u2713 Warpgate connected root@staging-env ~ $ You get audit and observability: And they get a web interface with instructions so you don't have to keep explaining it: Sounds good? Read the docs .homepage { /* width: 400px; */ } .jumbo { display: flex; flex-direction: column; align-items: center; text-align: center; margin-bottom: 5rem; } .jumbo h1 { font-size: 4rem; } .jumbo .buttons { display: flex; gap: 1rem; margin-top: 1rem; } .jumbo .buttons .btn { margin-bottom: 1rem; } .lead { max-width: 442px; } .title { font-size: 1.5rem; } .feature { margin-bottom: 2rem; font-size: 1.2rem; } .feature:first-child { padding-right: 2rem; } article { max-width: 100% !important; } .how-it-be { text-align: center; margin-top: 3rem; } .how-it-be p { font-size: 1.2rem; } .how-it-be img, .how-it-be pre{ max-width: calc(min(100%, 500px)); margin: 0 auto 2rem; }","title":"Home"},{"location":"auth-and-roles/","text":"User authentication and roles \u00a7 In the previous example , we've reused the Warpgate's admin user, which only had a password as its only way to authenticate. Warpgate supports passwords, public keys, authenticator apps, SSO (OIDC) and combinations thereof as authentication methods. Changing a user's password \u00a7 Log into the Warpgate admin UI and navigate to Config > Users > admin , delete the old password and click Add password to add a new one. Adding a password Users can also manage their own password by clicking their username in the top right corner. This can be globally disabled via Config > Global parameter . Adding a public key for a user \u00a7 Grab the user's public key in OpenSSH format (normally, you can just copy the ~/.ssh/id_<type>.pub file contents), e.g.: ssh-ed25519 AAAAC...bD4I user@host Click Add public key and paste it: Adding a public key Requiring multiple authentication factors \u00a7 Warpgate can require a client to present both a public key and a password. In the Auth policy > SSH section, uncheck Any credential and select both Password and Key : Setting up a multifactor auth policy Using roles to assign access \u00a7 You can use roles to grant a new user access to multiple targets at once (or assign multiple users to a target). Create and remove roles under Config > Roles . Assign roles to users and targets on their respective configuration pages.","title":"User authentication and roles"},{"location":"auth-and-roles/#user-authentication-and-roles","text":"In the previous example , we've reused the Warpgate's admin user, which only had a password as its only way to authenticate. Warpgate supports passwords, public keys, authenticator apps, SSO (OIDC) and combinations thereof as authentication methods.","title":"User authentication and roles"},{"location":"auth-and-roles/#changing-a-users-password","text":"Log into the Warpgate admin UI and navigate to Config > Users > admin , delete the old password and click Add password to add a new one. Adding a password Users can also manage their own password by clicking their username in the top right corner. This can be globally disabled via Config > Global parameter .","title":"Changing a user's password"},{"location":"auth-and-roles/#adding-a-public-key-for-a-user","text":"Grab the user's public key in OpenSSH format (normally, you can just copy the ~/.ssh/id_<type>.pub file contents), e.g.: ssh-ed25519 AAAAC...bD4I user@host Click Add public key and paste it: Adding a public key","title":"Adding a public key for a user"},{"location":"auth-and-roles/#requiring-multiple-authentication-factors","text":"Warpgate can require a client to present both a public key and a password. In the Auth policy > SSH section, uncheck Any credential and select both Password and Key : Setting up a multifactor auth policy","title":"Requiring multiple authentication factors"},{"location":"auth-and-roles/#using-roles-to-assign-access","text":"You can use roles to grant a new user access to multiple targets at once (or assign multiple users to a target). Create and remove roles under Config > Roles . Assign roles to users and targets on their respective configuration pages.","title":"Using roles to assign access"},{"location":"chaining/","text":"Chaining Warpgates \u00a7 Sometimes exposing a host on the network to the outside is not an option. In this case you can opt to forward connections from one Warpgate to another. Note This is fully transparent to the client (except for the double \"warpgate connected\" message in interactive sessions) - there are no SSH \"jump hosts\" involved in this setup. Copy outer Warpgate's public key \u00a7 Run warpgate client-keys and copy the Ed25519 public key: \u279c ~ warpgate client-keys 16:55:10 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 6, roles: 1) Warpgate SSH client keys: (add these to your target's authorized_hosts file) ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAxxxx+3RBsT5 # <-- this line rsa-sha2-256 AAAADHJzYS1zaGEyLTI1Ngxxxx Set up inner Warpgate \u00a7 Add your targets as usual (in this example: inner-server ). Add a \"jump user\" (here we'll be using wg-jump as a username) and add the outer Warpgate's public key as a credential. Check connection to the target with warpgate test-target inner-server Set up outer Warpgate \u00a7 Add the targets on the inner network again, using the inner Warpgate's address and port, as well as the Warpgate-style username: Host: <inner Warpgate's IP> Port: <inner Warpgate's SSH port> Username: wg-jump:inner-server Check your config with warpgate check . Check connection to the target through the inner Warpgate on the outer Warpgate with warpgate test-target inner-server Connect \u00a7 You can now grab the connection command from the landing page (or the admin UI) as usual and test it on a client: ssh <username>:inner-server@<outer-warpgate> -p <outer-wg-port>","title":"Chaining Warpgates"},{"location":"chaining/#chaining-warpgates","text":"Sometimes exposing a host on the network to the outside is not an option. In this case you can opt to forward connections from one Warpgate to another. Note This is fully transparent to the client (except for the double \"warpgate connected\" message in interactive sessions) - there are no SSH \"jump hosts\" involved in this setup.","title":"Chaining Warpgates"},{"location":"chaining/#copy-outer-warpgates-public-key","text":"Run warpgate client-keys and copy the Ed25519 public key: \u279c ~ warpgate client-keys 16:55:10 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 6, roles: 1) Warpgate SSH client keys: (add these to your target's authorized_hosts file) ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAxxxx+3RBsT5 # <-- this line rsa-sha2-256 AAAADHJzYS1zaGEyLTI1Ngxxxx","title":"Copy outer Warpgate's public key"},{"location":"chaining/#set-up-inner-warpgate","text":"Add your targets as usual (in this example: inner-server ). Add a \"jump user\" (here we'll be using wg-jump as a username) and add the outer Warpgate's public key as a credential. Check connection to the target with warpgate test-target inner-server","title":"Set up inner Warpgate"},{"location":"chaining/#set-up-outer-warpgate","text":"Add the targets on the inner network again, using the inner Warpgate's address and port, as well as the Warpgate-style username: Host: <inner Warpgate's IP> Port: <inner Warpgate's SSH port> Username: wg-jump:inner-server Check your config with warpgate check . Check connection to the target through the inner Warpgate on the outer Warpgate with warpgate test-target inner-server","title":"Set up outer Warpgate"},{"location":"chaining/#connect","text":"You can now grab the connection command from the landing page (or the admin UI) as usual and test it on a client: ssh <username>:inner-server@<outer-warpgate> -p <outer-wg-port>","title":"Connect"},{"location":"docs/","text":"Start here \u00a7 Welcome to the Warpgate docs. Getting started (native install) \u2192 Getting started (Docker) \u2192 Common topics \u00a7 Adding an SSH target User authentication and roles One-time passwords Tickets Single sign-on","title":"Home"},{"location":"docs/#start-here","text":"Welcome to the Warpgate docs. Getting started (native install) \u2192 Getting started (Docker) \u2192","title":"Start here"},{"location":"docs/#common-topics","text":"Adding an SSH target User authentication and roles One-time passwords Tickets Single sign-on","title":"Common topics"},{"location":"getting-started-on-docker/","text":"Getting started on Docker \u00a7 TL;DR \u00a7 Image name: ghcr.io/warp-tech/warpgate Image in the GHCR: https://github.com/warp-tech/warpgate/pkgs/container/warpgate Volumes required: /data Ports: 2222 (SSH), 8888 (HTTP), 33306 (MySQL), 55432 (PostgreSQL) Tags: latest (stable), vX.Y , vX.Y.Z Running with Docker Compose \u00a7 Download the Docker Compose config . Run docker compose run warpgate setup to generate a config file. Run docker compose up to start. Running directly from the image \u00a7 Storage \u00a7 The Warpgate image requires one volume to store its configuration and database in, mounted at /data . Setup \u00a7 docker run --rm -it -v <data dir>:/data ghcr.io/warp-tech/warpgate setup If you have a valid SSL certificate & key for your domain, now is the best time to replace the self-signed certificate inside the data volume. Running \u00a7 docker run --rm --name warpgate -p <host https port>:8888 -p <host ssh port>:2222 -it -v <data dir>:/data ghcr.io/warp-tech/warpgate Up next \u00a7 Adding an SSH target Adding an HTTP target","title":"Docker"},{"location":"getting-started-on-docker/#getting-started-on-docker","text":"","title":"Getting started on Docker"},{"location":"getting-started-on-docker/#tldr","text":"Image name: ghcr.io/warp-tech/warpgate Image in the GHCR: https://github.com/warp-tech/warpgate/pkgs/container/warpgate Volumes required: /data Ports: 2222 (SSH), 8888 (HTTP), 33306 (MySQL), 55432 (PostgreSQL) Tags: latest (stable), vX.Y , vX.Y.Z","title":"TL;DR"},{"location":"getting-started-on-docker/#running-with-docker-compose","text":"Download the Docker Compose config . Run docker compose run warpgate setup to generate a config file. Run docker compose up to start.","title":"Running with Docker Compose"},{"location":"getting-started-on-docker/#running-directly-from-the-image","text":"","title":"Running directly from the image"},{"location":"getting-started-on-docker/#storage","text":"The Warpgate image requires one volume to store its configuration and database in, mounted at /data .","title":"Storage"},{"location":"getting-started-on-docker/#setup","text":"docker run --rm -it -v <data dir>:/data ghcr.io/warp-tech/warpgate setup If you have a valid SSL certificate & key for your domain, now is the best time to replace the self-signed certificate inside the data volume.","title":"Setup"},{"location":"getting-started-on-docker/#running","text":"docker run --rm --name warpgate -p <host https port>:8888 -p <host ssh port>:2222 -it -v <data dir>:/data ghcr.io/warp-tech/warpgate","title":"Running"},{"location":"getting-started-on-docker/#up-next","text":"Adding an SSH target Adding an HTTP target","title":"Up next"},{"location":"getting-started/","text":"Getting started (binary) \u00a7 Note For Docker / k8s, see Getting started on Docker . Download the binary and save it as /usr/bin/warpgate : grab a stable/beta release from the Releases page or get a nightly build Make it executable: chmod +x /usr/bin/warpgate Setup \u00a7 Run warpgate setup and follow the prompts. If you want to use a non-default ( /etc/warpgate.yaml ) config path, pass it to all warpgate commands via --config <path> . To use an external database (MySQL or PostgreSQL) instead of the built-in SQLite, add --database-url mysql://... or --database-url postgres://... . Unattended setup There's also a non-interactive setup mode available - check out warpgate unattended-setup --help v0.7+ Here's what it might look like: $ warpgate setup 13:43:10 INFO Welcome to Warpgate 0.6.0 13:43:10 INFO Let's do some basic setup first. 13:43:10 INFO The new config will be written in /etc/warpgate.yaml. 13:43:10 INFO * Paths can be either absolute or relative to /etc. \u2714 Directory to store app data (up to a few MB) in \u00b7 /var/lib/warpgate \u2714 Endpoint to listen for SSH connections on \u00b7 0.0.0.0:2222 \u2714 Endpoint to expose admin web interface on \u00b7 0.0.0.0:8888 \u2714 Do you want to record user sessions? \u00b7 yes \u2714 Set a password for the Warpgate admin user \u00b7 ******** 13:43:28 INFO Generated configuration: [...] 13:43:28 INFO Saved into /etc/warpgate.yaml 13:43:28 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1) 13:43:28 INFO Generating HTTPS certificate 13:43:28 INFO 13:43:28 INFO Admin user credentials: 13:43:28 INFO * Username: admin 13:43:28 INFO * Password: <your password> 13:43:28 INFO 13:43:28 INFO You can now start Warpgate with: 13:43:28 INFO warpgate --config /etc/warpgate.yaml run If you need to start over, delete or move away the config file and run warpgate setup again. You can now start Warpgate with warpgate run and the output should look like this: $ warpgate run 13:44:13 INFO Warpgate version=0.6.0 13:44:13 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1) 13:44:13 INFO -------------------------------------------- 13:44:13 INFO Warpgate is now running. 13:44:13 INFO Accepting SSH connections on 0.0.0.0:2222 13:44:13 INFO Access admin UI on https://0.0.0.0:8888 13:44:13 INFO -------------------------------------------- 13:44:13 INFO Listening address=0.0.0.0:2222 13:44:13 INFO Listening address=0.0.0.0:8888 Try accessing https://<host>:8888/@warpgate/admin (note the https:// ) via a browser to confirm that the Admin UI is functional. The default username is admin and the password is the one you've set during setup. Login screen Session list in the admin UI Setting up as a service \u00a7 On systemd , follow Installing as a systemd service to configure Warpgate to run as a service. Up next \u00a7 Adding an SSH target Adding an HTTP target","title":"Native"},{"location":"getting-started/#getting-started-binary","text":"Note For Docker / k8s, see Getting started on Docker . Download the binary and save it as /usr/bin/warpgate : grab a stable/beta release from the Releases page or get a nightly build Make it executable: chmod +x /usr/bin/warpgate","title":"Getting started (binary)"},{"location":"getting-started/#setup","text":"Run warpgate setup and follow the prompts. If you want to use a non-default ( /etc/warpgate.yaml ) config path, pass it to all warpgate commands via --config <path> . To use an external database (MySQL or PostgreSQL) instead of the built-in SQLite, add --database-url mysql://... or --database-url postgres://... . Unattended setup There's also a non-interactive setup mode available - check out warpgate unattended-setup --help v0.7+ Here's what it might look like: $ warpgate setup 13:43:10 INFO Welcome to Warpgate 0.6.0 13:43:10 INFO Let's do some basic setup first. 13:43:10 INFO The new config will be written in /etc/warpgate.yaml. 13:43:10 INFO * Paths can be either absolute or relative to /etc. \u2714 Directory to store app data (up to a few MB) in \u00b7 /var/lib/warpgate \u2714 Endpoint to listen for SSH connections on \u00b7 0.0.0.0:2222 \u2714 Endpoint to expose admin web interface on \u00b7 0.0.0.0:8888 \u2714 Do you want to record user sessions? \u00b7 yes \u2714 Set a password for the Warpgate admin user \u00b7 ******** 13:43:28 INFO Generated configuration: [...] 13:43:28 INFO Saved into /etc/warpgate.yaml 13:43:28 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1) 13:43:28 INFO Generating HTTPS certificate 13:43:28 INFO 13:43:28 INFO Admin user credentials: 13:43:28 INFO * Username: admin 13:43:28 INFO * Password: <your password> 13:43:28 INFO 13:43:28 INFO You can now start Warpgate with: 13:43:28 INFO warpgate --config /etc/warpgate.yaml run If you need to start over, delete or move away the config file and run warpgate setup again. You can now start Warpgate with warpgate run and the output should look like this: $ warpgate run 13:44:13 INFO Warpgate version=0.6.0 13:44:13 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1) 13:44:13 INFO -------------------------------------------- 13:44:13 INFO Warpgate is now running. 13:44:13 INFO Accepting SSH connections on 0.0.0.0:2222 13:44:13 INFO Access admin UI on https://0.0.0.0:8888 13:44:13 INFO -------------------------------------------- 13:44:13 INFO Listening address=0.0.0.0:2222 13:44:13 INFO Listening address=0.0.0.0:8888 Try accessing https://<host>:8888/@warpgate/admin (note the https:// ) via a browser to confirm that the Admin UI is functional. The default username is admin and the password is the one you've set during setup. Login screen Session list in the admin UI","title":"Setup"},{"location":"getting-started/#setting-up-as-a-service","text":"On systemd , follow Installing as a systemd service to configure Warpgate to run as a service.","title":"Setting up as a service"},{"location":"getting-started/#up-next","text":"Adding an SSH target Adding an HTTP target","title":"Up next"},{"location":"http-domain-binding/","text":"HTTP domain binding \u00a7 v0.5+ Instead of using ?warpgate-target= in the URL, you can use multiple domains/hostnames and link each to a specific target. Accessing Warpgate over HTTP on a specific domain will then automatically select the corresponding target. For optimal results, you want to host Warpgate on a common higher-level domain (e.g. wg.acme.inc , as set by the external_host config option), with target-specific domains as subdomains of this one (e.g. gitlab.wg.acme.inc ) - this will prevent users from having to log in again when switching between domains (Warpgate will set its session cookie for all subdomains). If you have separate certificates for your domains, set up SNI . Linking a target to a domain \u00a7 Set the Bind to a domain property in the target config.","title":"HTTP domain binding"},{"location":"http-domain-binding/#http-domain-binding","text":"v0.5+ Instead of using ?warpgate-target= in the URL, you can use multiple domains/hostnames and link each to a specific target. Accessing Warpgate over HTTP on a specific domain will then automatically select the corresponding target. For optimal results, you want to host Warpgate on a common higher-level domain (e.g. wg.acme.inc , as set by the external_host config option), with target-specific domains as subdomains of this one (e.g. gitlab.wg.acme.inc ) - this will prevent users from having to log in again when switching between domains (Warpgate will set its session cookie for all subdomains). If you have separate certificates for your domains, set up SNI .","title":"HTTP domain binding"},{"location":"http-domain-binding/#linking-a-target-to-a-domain","text":"Set the Bind to a domain property in the target config.","title":"Linking a target to a domain"},{"location":"log-forwarding/","text":"Log forwarding \u00a7 v0.2+ By default, Warpgate logs into its stdout , relying on systemd / journald for log management. However, you can configure it to forward logs to a local log collector through a UNIX Datagram (\"UDP\") socket, e.g. Vector . Format \u00a7 Warpgate will send log records into the socket as separate datagrams, formatted as JSON. Example \u00a7 This example uses Vector as a log collector. Set up a listener socket \u00a7 In Vector config, add a socket source: [sources.warpgate] type = \"socket\" path = \"/var/run/vector-warpgate.sock\" mode = \"unix_datagram\" If you just want to try Vector out, here's a full config file that you can run with `vector -c file.toml` that will dump all received log entries to console: data_dir = \"/var/lib/vector/\" [sources.source0] path = \"/var/run/vector-warpgate.sock\" mode = \"unix_datagram\" type = \"socket\" [transforms.transform0] inputs = [ \"source0\" ] drop_field = true drop_invalid = false type = \"json_parser\" [sinks.sink0] inputs = [ \"transform0\" ] target = \"stdout\" type = \"console\" [sinks.sink0.encoding] codec = \"json\" [sinks.sink0.healthcheck] enabled = true [sinks.sink0.buffer] type = \"memory\" max_events = 500 when_full = \"block\" Set up forwarding \u00a7 In the Warpgate config, set log.send_to : + log: + send_to: /var/run/vector-warpgate.sock and restart Warpgate.","title":"Log forwarding"},{"location":"log-forwarding/#log-forwarding","text":"v0.2+ By default, Warpgate logs into its stdout , relying on systemd / journald for log management. However, you can configure it to forward logs to a local log collector through a UNIX Datagram (\"UDP\") socket, e.g. Vector .","title":"Log forwarding"},{"location":"log-forwarding/#format","text":"Warpgate will send log records into the socket as separate datagrams, formatted as JSON.","title":"Format"},{"location":"log-forwarding/#example","text":"This example uses Vector as a log collector.","title":"Example"},{"location":"log-forwarding/#set-up-a-listener-socket","text":"In Vector config, add a socket source: [sources.warpgate] type = \"socket\" path = \"/var/run/vector-warpgate.sock\" mode = \"unix_datagram\" If you just want to try Vector out, here's a full config file that you can run with `vector -c file.toml` that will dump all received log entries to console: data_dir = \"/var/lib/vector/\" [sources.source0] path = \"/var/run/vector-warpgate.sock\" mode = \"unix_datagram\" type = \"socket\" [transforms.transform0] inputs = [ \"source0\" ] drop_field = true drop_invalid = false type = \"json_parser\" [sinks.sink0] inputs = [ \"transform0\" ] target = \"stdout\" type = \"console\" [sinks.sink0.encoding] codec = \"json\" [sinks.sink0.healthcheck] enabled = true [sinks.sink0.buffer] type = \"memory\" max_events = 500 when_full = \"block\"","title":"Set up a listener socket"},{"location":"log-forwarding/#set-up-forwarding","text":"In the Warpgate config, set log.send_to : + log: + send_to: /var/run/vector-warpgate.sock and restart Warpgate.","title":"Set up forwarding"},{"location":"otp/","text":"One-time passwords (OTP) \u00a7 Configuration \u00a7 Log into the Warpgate admin UI and navigate to Config > Users > admin and click Add OTP : Adding an OTP credential The QR code shown can now be used to set up a mobile TOTP authenticator app. Once done, click Update configuration to save. Credentials policy configuration for SSH & HTTP \u00a7 To specify 2FA policies for SSH or HTTP sessions, uncheck Any credential in the corresponding Auth policy section and select all required credentials: Authentication policy with OTP","title":"One-time passwords (OTP)"},{"location":"otp/#one-time-passwords-otp","text":"","title":"One-time passwords (OTP)"},{"location":"otp/#configuration","text":"Log into the Warpgate admin UI and navigate to Config > Users > admin and click Add OTP : Adding an OTP credential The QR code shown can now be used to set up a mobile TOTP authenticator app. Once done, click Update configuration to save.","title":"Configuration"},{"location":"otp/#credentials-policy-configuration-for-ssh-http","text":"To specify 2FA policies for SSH or HTTP sessions, uncheck Any credential in the corresponding Auth policy section and select all required credentials: Authentication policy with OTP","title":"Credentials policy configuration for SSH &amp; HTTP"},{"location":"protocol-support/","text":"Protocol support \u00a7 SSH \u00a7 Ciphers: chacha20-poly1305 , AES256-GCM, AES256-CTR, AES192-CTR, AES128-CTR. Key exchanges: Curve25519, DH GEX SHA-256, DH groups 14-18. Keys: ssh-ed25519 , ssh-rsa , rsa-sha2-512 , rsa-sha2-256 MACs: HMAC-SHA-1/256/512 with optional ETM. Compression: Zlib. \u2705 Tickets \u2705 2FA MySQL \u00a7 MySQL text protocol only (prepared statements are not supported) As server: Identifies itself as MySQL 8.0 (meaning you can use the MySQL Workbench even if the target is a MariaDB) \u2705 TLS (forced) mysql_clear_password auth over TLS As client: \u2705 TLS (optional) \u2705 mysql_native_password auth \u2705 Tickets \u274c 2FA \u274c MariaDB protocol extensions (such as query progress bars) PostgreSQL \u00a7 As server: \u2705 TLS (forced) password cleartext auth over TLS As client: \u2705 TLS (optional) \u2705 password auth \u2705 md5 auth \u2705 sha256-scram auth \u2705 Tickets \u2705 2FA v0.14+ HTTP \u00a7 \u2705 HTTP/1.1 \u2705 HTTP/2 \u2705 TLS (as server: forced) \u2705 Websockets \u2705 Tickets v0.5+ \u2705 2FA","title":"Protocol support"},{"location":"protocol-support/#protocol-support","text":"","title":"Protocol support"},{"location":"protocol-support/#ssh","text":"Ciphers: chacha20-poly1305 , AES256-GCM, AES256-CTR, AES192-CTR, AES128-CTR. Key exchanges: Curve25519, DH GEX SHA-256, DH groups 14-18. Keys: ssh-ed25519 , ssh-rsa , rsa-sha2-512 , rsa-sha2-256 MACs: HMAC-SHA-1/256/512 with optional ETM. Compression: Zlib. \u2705 Tickets \u2705 2FA","title":"SSH"},{"location":"protocol-support/#mysql","text":"MySQL text protocol only (prepared statements are not supported) As server: Identifies itself as MySQL 8.0 (meaning you can use the MySQL Workbench even if the target is a MariaDB) \u2705 TLS (forced) mysql_clear_password auth over TLS As client: \u2705 TLS (optional) \u2705 mysql_native_password auth \u2705 Tickets \u274c 2FA \u274c MariaDB protocol extensions (such as query progress bars)","title":"MySQL"},{"location":"protocol-support/#postgresql","text":"As server: \u2705 TLS (forced) password cleartext auth over TLS As client: \u2705 TLS (optional) \u2705 password auth \u2705 md5 auth \u2705 sha256-scram auth \u2705 Tickets \u2705 2FA v0.14+","title":"PostgreSQL"},{"location":"protocol-support/#http","text":"\u2705 HTTP/1.1 \u2705 HTTP/2 \u2705 TLS (as server: forced) \u2705 Websockets \u2705 Tickets v0.5+ \u2705 2FA","title":"HTTP"},{"location":"recovering-access/","text":"Recovering admin access \u00a7 Forgot your password and your dog ate the OTP dongle? Use warpgate recover-access to reset the admin password and disable 2FA: \u279c ~ warpgate recover-access 17:08:24 INFO Using config: \"/etc/warpgate.yaml\" \u2714 Select a user to recover access for \u00b7 admin \u2714 New password for admin \u00b7 ******** ? This tool will add a new password for the user and set their HTTP auth policy to only require a password. Continue? (y/n) \u203a yes","title":"Recovering admin access"},{"location":"recovering-access/#recovering-admin-access","text":"Forgot your password and your dog ate the OTP dongle? Use warpgate recover-access to reset the admin password and disable 2FA: \u279c ~ warpgate recover-access 17:08:24 INFO Using config: \"/etc/warpgate.yaml\" \u2714 Select a user to recover access for \u00b7 admin \u2714 New password for admin \u00b7 ******** ? This tool will add a new password for the user and set their HTTP auth policy to only require a password. Continue? (y/n) \u203a yes","title":"Recovering admin access"},{"location":"reverse-proxy/","text":"Running behind a reverse proxy \u00a7 Warpgate doesn't need any specific configuration except in the following case: When using single sign-on , make sure your reverse proxy supplies the correct Host and X-Forwarded-Proto headers - this allows Warpgate to construct correct redirect URLs. Set http.trust_x_forwarded_headers to true in the config file. Example for NGINX: server { server_name warpgate.acme.inc ; listen *: 443 http2 ssl ; ssl_certificate ... ; ssl_certificate_key ... ; location / { proxy_pass https :// 192.168.10.1 : 8888 ; proxy_set_header Host $ http_host ; proxy_set_header X-Forwarded-Proto $ scheme ; proxy_http_version 1.1 ; } }","title":"Running behind a reverse proxy"},{"location":"reverse-proxy/#running-behind-a-reverse-proxy","text":"Warpgate doesn't need any specific configuration except in the following case: When using single sign-on , make sure your reverse proxy supplies the correct Host and X-Forwarded-Proto headers - this allows Warpgate to construct correct redirect URLs. Set http.trust_x_forwarded_headers to true in the config file. Example for NGINX: server { server_name warpgate.acme.inc ; listen *: 443 http2 ssl ; ssl_certificate ... ; ssl_certificate_key ... ; location / { proxy_pass https :// 192.168.10.1 : 8888 ; proxy_set_header Host $ http_host ; proxy_set_header X-Forwarded-Proto $ scheme ; proxy_http_version 1.1 ; } }","title":"Running behind a reverse proxy"},{"location":"sni/","text":"TLS SNI \u00a7 v0.15+ Intro \u00a7 SNI allows Warpgate to automatically pick the correct certificate for each domain when serving HTTPS. Configuration \u00a7 In the config file, add the http.sni_certificates list: http: certificate: ... key: ... + sni_certificates: + - certificate: other_cert.pem + key: other_key.pem + - certificate: yet_another_cert.pem + key: yet_another_key.pem The \"main\" certificate will remain active as a fallback for any requests that do not match domain names known from the SNI certificate list.","title":"TLS SNI"},{"location":"sni/#tls-sni","text":"v0.15+","title":"TLS SNI"},{"location":"sni/#intro","text":"SNI allows Warpgate to automatically pick the correct certificate for each domain when serving HTTPS.","title":"Intro"},{"location":"sni/#configuration","text":"In the config file, add the http.sni_certificates list: http: certificate: ... key: ... + sni_certificates: + - certificate: other_cert.pem + key: other_key.pem + - certificate: yet_another_cert.pem + key: yet_another_key.pem The \"main\" certificate will remain active as a fallback for any requests that do not match domain names known from the SNI certificate list.","title":"Configuration"},{"location":"sso/","text":"Single sign-on \u00a7 v0.5+ Intro \u00a7 Warpgate can use arbitrary OpenID Connect (OIDC) providers to authenticate users based on their verified emails. OIDC providers include, but are not limited to: Google Accounts Sign in with Apple GitLab Microsoft Azure Okta Configuration \u00a7 Host header \u00a7 v0.13+ To use SSO, Warpgate needs to know what its external hostname is. Starting with v0.12, Warpgate uses the Host header to determine the external host. If you're running behind a reverse proxy , the proxy needs to pass through the Host header. External host setting (legacy) \u00a7 Pre v0.12 Warpgate would try its best to figure it out based on the client's request, but it's better if you set it explicitly via the top-level external_host config option: + external_host: warpgate.acme.inc external_host can include a port as well Obtaining app credentials from a provider \u00a7 You'll need to register your Warpgate instance as an \"app\" (terminology varies per provider) at the provider and obtain a Client ID and a Client secret . You'll need to provide a Redirect URL which - which will be verified by the SSO provider. The redirect URL (aka return URL ) for Warpgate is https://<warpgate-external-host>/@warpgate/api/sso/return . Okta provides excellent guides on registering an app with various providers: Google Apple GitLab Microsoft Azure Adding credentials to the config file \u00a7 With a Client ID and a Client Secret in hand, you can add these to the Warpgate config file: Google \u00a7 external_host: warpgate.acme.inc:8888 + sso_providers: + - name: google + label: Google login + provider: + type: google + client_id: 1234... + client_secret: ABC... Microsoft Azure \u00a7 external_host: warpgate.acme.inc:8888 + sso_providers: + - name: azure + provider: + type: azure + client_id: 123... + client_secret: ABC... + tenant: XYZ... Apple \u00a7 v0.6.6+ external_host: warpgate.acme.inc:8888 + sso_providers: + - name: apple + label: Apple ID + provider: + type: apple + team_id: ABC... # your Apple Team ID + client_id: com.warpgate.test # your Service ID (not the App ID!) + key_id: ABC... # the ID of the key you've created + client_secret: ABC... # Base64 encoded contents of the .p8 private key file you've got from Apple Custom \u00a7 external_host: warpgate.acme.inc:8888 + sso_providers: + - name: custom + label: ACME SSO + provider: + type: custom + client_id: 123... + client_secret: ABC... + issuer_url: https://sso.acme.inc + scopes: [\"email\"] OIDC audience verification \u00a7 Normally, the OIDC provider should issue a token that is only valid for Warpgate itself. If this is not possible, you have two options: Explicitly whitelist additional trusted audiences: sso_providers: - name: custom label: ACME SSO + additional_trusted_audiences: + - one + - two provider: ... Fully ignore any additional audiences in the token (v0.13.1+): sso_providers: - name: custom label: ACME SSO + trust_unknown_audiences: true provider: ... Automatically creating users \u00a7 v0.13+ Warpgate can automatically create users for new SSO logins. The SSO server has to provide the preferred_username OIDC claim for this to work. sso_providers: - name: custom label: ACME SSO + auto_create_users: true provider: ... Requiring SSO for a user \u00a7 Users are linked to their SSO accounts based on their email. If the SSO provider advertises email verification status, Warpgate will require the email to be verified. To link a user to SSO, click Add SSO in the credentials section, and then (optionally) set SSO as the only accepted credential type for HTTP connections. Setting SSO as the only authentication method Here, we've also set SSO to be the only allowed login credential for HTTP auth, and have set SSH to use out-of-band web authentication. In-browser auth (OOB web authentication) means that Warpgate will send a login link to the SSH client and will wait for the user to authenticate themselves in a browser. The auth requirements will be the same as set for the http protocol. \u276f ssh cwilde:tnt@warpgate.acme.inc -p 2222 ---------------------------------------------------------------- Warpgate authentication: please open https://warpgate.acme.inc/@warpgate#/login/31282192-ad29-4fa7-bdc2-5b481d531e58 in your browser Make sure you're seeing this security key: E E 0 5 ---------------------------------------------------------------- (cwilde:tnt@warpgate.acme.inc) Press Enter when done: Login page with SSO buttons In-browser auth request Setting roles via SSO \u00a7 v0.10+ With custom type OIDC providers, Warpgate can also sync the user's role memberships when they log in. For that, your provider must set a warpgate_roles OIDC claim (a JSON array of role names) either in the ID Token or the UserInfo response. By default, Warpgate will use these names as-is and completely overwrite the user's memberships. You can also set role_mappings in the provider's configuration to explicitly map claim values to role names. In this case, only the roles mentioned here will be synced SSO, and the memberships in other roles won't be affected. For example: - name : oidc-custom label : Custom SSO provider : type : custom client_id : ... client_secret : ... issuer_url : ... scopes : [] role_mappings : 'QA group' : 'qa' Admins : 'warpgate:admin'","title":"Single sign-on"},{"location":"sso/#single-sign-on","text":"v0.5+","title":"Single sign-on"},{"location":"sso/#intro","text":"Warpgate can use arbitrary OpenID Connect (OIDC) providers to authenticate users based on their verified emails. OIDC providers include, but are not limited to: Google Accounts Sign in with Apple GitLab Microsoft Azure Okta","title":"Intro"},{"location":"sso/#configuration","text":"","title":"Configuration"},{"location":"sso/#host-header","text":"v0.13+ To use SSO, Warpgate needs to know what its external hostname is. Starting with v0.12, Warpgate uses the Host header to determine the external host. If you're running behind a reverse proxy , the proxy needs to pass through the Host header.","title":"Host header"},{"location":"sso/#external-host-setting-legacy","text":"Pre v0.12 Warpgate would try its best to figure it out based on the client's request, but it's better if you set it explicitly via the top-level external_host config option: + external_host: warpgate.acme.inc external_host can include a port as well","title":"External host setting (legacy)"},{"location":"sso/#obtaining-app-credentials-from-a-provider","text":"You'll need to register your Warpgate instance as an \"app\" (terminology varies per provider) at the provider and obtain a Client ID and a Client secret . You'll need to provide a Redirect URL which - which will be verified by the SSO provider. The redirect URL (aka return URL ) for Warpgate is https://<warpgate-external-host>/@warpgate/api/sso/return . Okta provides excellent guides on registering an app with various providers: Google Apple GitLab Microsoft Azure","title":"Obtaining app credentials from a provider"},{"location":"sso/#adding-credentials-to-the-config-file","text":"With a Client ID and a Client Secret in hand, you can add these to the Warpgate config file:","title":"Adding credentials to the config file"},{"location":"sso/#google","text":"external_host: warpgate.acme.inc:8888 + sso_providers: + - name: google + label: Google login + provider: + type: google + client_id: 1234... + client_secret: ABC...","title":"Google"},{"location":"sso/#microsoft-azure","text":"external_host: warpgate.acme.inc:8888 + sso_providers: + - name: azure + provider: + type: azure + client_id: 123... + client_secret: ABC... + tenant: XYZ...","title":"Microsoft Azure"},{"location":"sso/#apple","text":"v0.6.6+ external_host: warpgate.acme.inc:8888 + sso_providers: + - name: apple + label: Apple ID + provider: + type: apple + team_id: ABC... # your Apple Team ID + client_id: com.warpgate.test # your Service ID (not the App ID!) + key_id: ABC... # the ID of the key you've created + client_secret: ABC... # Base64 encoded contents of the .p8 private key file you've got from Apple","title":"Apple"},{"location":"sso/#custom","text":"external_host: warpgate.acme.inc:8888 + sso_providers: + - name: custom + label: ACME SSO + provider: + type: custom + client_id: 123... + client_secret: ABC... + issuer_url: https://sso.acme.inc + scopes: [\"email\"]","title":"Custom"},{"location":"sso/#oidc-audience-verification","text":"Normally, the OIDC provider should issue a token that is only valid for Warpgate itself. If this is not possible, you have two options: Explicitly whitelist additional trusted audiences: sso_providers: - name: custom label: ACME SSO + additional_trusted_audiences: + - one + - two provider: ... Fully ignore any additional audiences in the token (v0.13.1+): sso_providers: - name: custom label: ACME SSO + trust_unknown_audiences: true provider: ...","title":"OIDC audience verification"},{"location":"sso/#automatically-creating-users","text":"v0.13+ Warpgate can automatically create users for new SSO logins. The SSO server has to provide the preferred_username OIDC claim for this to work. sso_providers: - name: custom label: ACME SSO + auto_create_users: true provider: ...","title":"Automatically creating users"},{"location":"sso/#requiring-sso-for-a-user","text":"Users are linked to their SSO accounts based on their email. If the SSO provider advertises email verification status, Warpgate will require the email to be verified. To link a user to SSO, click Add SSO in the credentials section, and then (optionally) set SSO as the only accepted credential type for HTTP connections. Setting SSO as the only authentication method Here, we've also set SSO to be the only allowed login credential for HTTP auth, and have set SSH to use out-of-band web authentication. In-browser auth (OOB web authentication) means that Warpgate will send a login link to the SSH client and will wait for the user to authenticate themselves in a browser. The auth requirements will be the same as set for the http protocol. \u276f ssh cwilde:tnt@warpgate.acme.inc -p 2222 ---------------------------------------------------------------- Warpgate authentication: please open https://warpgate.acme.inc/@warpgate#/login/31282192-ad29-4fa7-bdc2-5b481d531e58 in your browser Make sure you're seeing this security key: E E 0 5 ---------------------------------------------------------------- (cwilde:tnt@warpgate.acme.inc) Press Enter when done: Login page with SSO buttons In-browser auth request","title":"Requiring SSO for a user"},{"location":"sso/#setting-roles-via-sso","text":"v0.10+ With custom type OIDC providers, Warpgate can also sync the user's role memberships when they log in. For that, your provider must set a warpgate_roles OIDC claim (a JSON array of role names) either in the ID Token or the UserInfo response. By default, Warpgate will use these names as-is and completely overwrite the user's memberships. You can also set role_mappings in the provider's configuration to explicitly map claim values to role names. In this case, only the roles mentioned here will be synced SSO, and the memberships in other roles won't be affected. For example: - name : oidc-custom label : Custom SSO provider : type : custom client_id : ... client_secret : ... issuer_url : ... scopes : [] role_mappings : 'QA group' : 'qa' Admins : 'warpgate:admin'","title":"Setting roles via SSO"},{"location":"support/","text":"Support \u00a7 Warpgate offers a professional support service that includes: 2 hours of e-mail support per month (SLA, 24 hours response time) A meet-and-greet Zoom call with your ops team. Prioritized GitHub issue handling. Access to custom feature development (billed separately on per-project basis). Knowing that the software your company relies on for core security has a stable future, while being maintained and continuously improved. Pricing The professional support service costs $750 per month. In the times where one project after another falls into the enshittification cycle of becoming a worse SaaS version of itself, this funding model allows Warpgate to stay what it was always meant to be: a secure, open and robust gatekeeper at the edge of your infrastructure. Order via GitHub Sponsors \u2192 Request a direct invoice \u2192","title":"Support"},{"location":"support/#support","text":"Warpgate offers a professional support service that includes: 2 hours of e-mail support per month (SLA, 24 hours response time) A meet-and-greet Zoom call with your ops team. Prioritized GitHub issue handling. Access to custom feature development (billed separately on per-project basis). Knowing that the software your company relies on for core security has a stable future, while being maintained and continuously improved. Pricing The professional support service costs $750 per month. In the times where one project after another falls into the enshittification cycle of becoming a worse SaaS version of itself, this funding model allows Warpgate to stay what it was always meant to be: a secure, open and robust gatekeeper at the edge of your infrastructure. Order via GitHub Sponsors \u2192 Request a direct invoice \u2192","title":"Support"},{"location":"systemd/","text":"Installing as a systemd service \u00a7 To add Warpgate to systemd and have it start automatically, run: cat <<EOF > /etc/systemd/system/warpgate.service [Unit] Description=Warpgate After=network.target StartLimitIntervalSec=0 [Service] Type=notify Restart=always RestartSec=5 ExecStart=/usr/bin/warpgate --config /etc/warpgate.yaml run [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable --now warpgate","title":"Installing as a systemd service"},{"location":"systemd/#installing-as-a-systemd-service","text":"To add Warpgate to systemd and have it start automatically, run: cat <<EOF > /etc/systemd/system/warpgate.service [Unit] Description=Warpgate After=network.target StartLimitIntervalSec=0 [Service] Type=notify Restart=always RestartSec=5 ExecStart=/usr/bin/warpgate --config /etc/warpgate.yaml run [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable --now warpgate","title":"Installing as a systemd service"},{"location":"tickets/","text":"Access tickets \u00a7 You can issue tickets that grant a specific user access to a specific target, bypassing authorization. This is especially useful for non-interactive sessions where 2FA flows aren't possible, e.g. when connecting an application to a database or an API through Warpgate. Creating a ticket \u00a7 In the admin UI, create a ticket in the Config -> Tickets section, selecting a user account and a target: Creating a ticket Once the ticket is created, you'll see the protocol-specific connection instructions. In this example, for an MySQL database, the ticket is passed as a part of the connection string / DATABASE_URL : Ticket connection instructions","title":"Access tickets"},{"location":"tickets/#access-tickets","text":"You can issue tickets that grant a specific user access to a specific target, bypassing authorization. This is especially useful for non-interactive sessions where 2FA flows aren't possible, e.g. when connecting an application to a database or an API through Warpgate.","title":"Access tickets"},{"location":"tickets/#creating-a-ticket","text":"In the admin UI, create a ticket in the Config -> Tickets section, selecting a user account and a target: Creating a ticket Once the ticket is created, you'll see the protocol-specific connection instructions. In this example, for an MySQL database, the ticket is passed as a part of the connection string / DATABASE_URL : Ticket connection instructions","title":"Creating a ticket"},{"location":"targets/http/","text":"Adding HTTP targets \u00a7 Connection setup \u00a7 Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new HTTP target a name: Adding an HTTP target Fill out the configuration: Target URL : the destination web service, including the protocol ( http:// or https:// ). TLS mode : whether to ignore, prefer or require TLS (overrides the URL's protocol). Verify certificate : whether to reject untrusted certificates. Bind to a domain : link this target to a specific sub-domain of the domain Warpgate is on - see HTTP domain binding Example: HTTP target configuration The target should show up on the Warpgate's homepage: HTTP target on the home page Accessing the target \u00a7 Users can either access the target by selecting it on the Warpgate's homepage, with a direct URL: https://<warpgate host>:<port>/?warpgate-target=<name> You can also find a copyable URL in the Targets section of the admin UI: HTTP connection instructions While the target is active, Warpgate will pass-through all HTTP traffic in this session straight to it. You can return back to the homepage by manually navigating to /@warpgate , or by using the injected session menu (shown below). The menu button can be dragged around to stay out of the way and will remember its location. Accessing an HTTP target Up next \u00a7 User authentication and roles","title":"HTTP"},{"location":"targets/http/#adding-http-targets","text":"","title":"Adding HTTP targets"},{"location":"targets/http/#connection-setup","text":"Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new HTTP target a name: Adding an HTTP target Fill out the configuration: Target URL : the destination web service, including the protocol ( http:// or https:// ). TLS mode : whether to ignore, prefer or require TLS (overrides the URL's protocol). Verify certificate : whether to reject untrusted certificates. Bind to a domain : link this target to a specific sub-domain of the domain Warpgate is on - see HTTP domain binding Example: HTTP target configuration The target should show up on the Warpgate's homepage: HTTP target on the home page","title":"Connection setup"},{"location":"targets/http/#accessing-the-target","text":"Users can either access the target by selecting it on the Warpgate's homepage, with a direct URL: https://<warpgate host>:<port>/?warpgate-target=<name> You can also find a copyable URL in the Targets section of the admin UI: HTTP connection instructions While the target is active, Warpgate will pass-through all HTTP traffic in this session straight to it. You can return back to the homepage by manually navigating to /@warpgate , or by using the injected session menu (shown below). The menu button can be dragged around to stay out of the way and will remember its location. Accessing an HTTP target","title":"Accessing the target"},{"location":"targets/http/#up-next","text":"User authentication and roles","title":"Up next"},{"location":"targets/mysql/","text":"Adding MySQL targets \u00a7 Authentication setup \u00a7 Currently, Wargate can connect to MySQL and MariaDB servers with a username/password via the mysql_native_password auth mode. As a MySQL protocol server, Warpgate only allows secure (TLS) connections and uses mysql_clear_password auth mode. Enabling MySQL listener \u00a7 Enable the MySQL protocol in your config file (default: /etc/warpgate.yaml ) if you didn't do so during the initial setup: + mysql: + enable: true + certificate: /var/lib/warpgate/tls.certificate.pem + key: /var/lib/warpgate/tls.key.pem You can reuse the same certificate and key that are used for the HTTP listener. Connection setup \u00a7 Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new MySQL target a name: Adding a MySQL target Fill out the configuration: MySQL target configuration The target should show up on the Warpgate's homepage: MySQL target on the homepage Users will be able to click the entry to obtain connection instructions: MySQL target on the homepage Client setup \u00a7 You can now use any MySQL/MariaDB client applications to connect through Warpgate with the following settings: Host: the Warpgate host Port: the Warpgate MySQL port (default: 33306) Username: admin#<target-name> or admin:<target-name> , in this example: admin#db1 Password: your Warpgate admin password TLS : enabled Cleartext password authentication: allowed If your client uses a database URL, use: mysql://<username>#<target>:<password>@<warpgate host>:<warpgate mysql port>?sslMode=required While your MySQL session is running, you'll be able to see its status in the Admin UI, including the query log: MySQL session log Up next \u00a7 User authentication and roles","title":"MySQL"},{"location":"targets/mysql/#adding-mysql-targets","text":"","title":"Adding MySQL targets"},{"location":"targets/mysql/#authentication-setup","text":"Currently, Wargate can connect to MySQL and MariaDB servers with a username/password via the mysql_native_password auth mode. As a MySQL protocol server, Warpgate only allows secure (TLS) connections and uses mysql_clear_password auth mode.","title":"Authentication setup"},{"location":"targets/mysql/#enabling-mysql-listener","text":"Enable the MySQL protocol in your config file (default: /etc/warpgate.yaml ) if you didn't do so during the initial setup: + mysql: + enable: true + certificate: /var/lib/warpgate/tls.certificate.pem + key: /var/lib/warpgate/tls.key.pem You can reuse the same certificate and key that are used for the HTTP listener.","title":"Enabling MySQL listener"},{"location":"targets/mysql/#connection-setup","text":"Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new MySQL target a name: Adding a MySQL target Fill out the configuration: MySQL target configuration The target should show up on the Warpgate's homepage: MySQL target on the homepage Users will be able to click the entry to obtain connection instructions: MySQL target on the homepage","title":"Connection setup"},{"location":"targets/mysql/#client-setup","text":"You can now use any MySQL/MariaDB client applications to connect through Warpgate with the following settings: Host: the Warpgate host Port: the Warpgate MySQL port (default: 33306) Username: admin#<target-name> or admin:<target-name> , in this example: admin#db1 Password: your Warpgate admin password TLS : enabled Cleartext password authentication: allowed If your client uses a database URL, use: mysql://<username>#<target>:<password>@<warpgate host>:<warpgate mysql port>?sslMode=required While your MySQL session is running, you'll be able to see its status in the Admin UI, including the query log: MySQL session log","title":"Client setup"},{"location":"targets/mysql/#up-next","text":"User authentication and roles","title":"Up next"},{"location":"targets/postgres/","text":"Adding PostgreSQL targets \u00a7 Authentication setup \u00a7 Currently, Warpgate can connect to PostgreSQL servers with a username/password using md5 and password (plaintext) auth mode. As a PostgreSQL protocol server, Warpgate only allows secure (TLS) connections and uses password auth mode. Enabling PostgreSQL listener \u00a7 Enable the PostgreSQL protocol in your config file (default: /etc/warpgate.yaml ) if you didn't do so during the initial setup: + postgres: + enable: true + certificate: /var/lib/warpgate/tls.certificate.pem + key: /var/lib/warpgate/tls.key.pem You can reuse the same certificate and key that are used for the HTTP listener. Connection setup \u00a7 Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new PostgreSQL target a name: Adding a PostgreSQL target Fill out the configuration: PostgreSQL target configuration The target should show up on the Warpgate's homepage: PostgreSQL target on the homepage Users will be able to click the entry to obtain connection instructions: PostgreSQL target connection instructions Client setup \u00a7 You can now use any PostgreSQL client applications to connect through Warpgate with the following settings: Host: the Warpgate host Port: the Warpgate PostgreSQL port (default: 55432) Username: admin#<target-name> or admin:<target-name> , in this example: admin#db1 Password: your Warpgate admin password Tls enabled Cleartext password authentication: allowed If your client uses a database URL, use: postgresql://<username>#<target>:<password>@<warpgate host>:<warpgate postgresql port>?sslmode=require While your PostgreSQL session is running, you'll be able to see its status in the Admin UI, including the query log: PostgreSQL session log 2-factor authentication \u00a7 v0.14+ Warpgate supports the \"In-browser auth\" authentication for PostgreSQL clients by sending a login link in a PostgreSQL notice message. Some clients might ignore notice messages, but the users will still be able see and confirm their login request if they log into the Warpgate web UI. Up next \u00a7 User authentication and roles","title":"PostgreSQL"},{"location":"targets/postgres/#adding-postgresql-targets","text":"","title":"Adding PostgreSQL targets"},{"location":"targets/postgres/#authentication-setup","text":"Currently, Warpgate can connect to PostgreSQL servers with a username/password using md5 and password (plaintext) auth mode. As a PostgreSQL protocol server, Warpgate only allows secure (TLS) connections and uses password auth mode.","title":"Authentication setup"},{"location":"targets/postgres/#enabling-postgresql-listener","text":"Enable the PostgreSQL protocol in your config file (default: /etc/warpgate.yaml ) if you didn't do so during the initial setup: + postgres: + enable: true + certificate: /var/lib/warpgate/tls.certificate.pem + key: /var/lib/warpgate/tls.key.pem You can reuse the same certificate and key that are used for the HTTP listener.","title":"Enabling PostgreSQL listener"},{"location":"targets/postgres/#connection-setup","text":"Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new PostgreSQL target a name: Adding a PostgreSQL target Fill out the configuration: PostgreSQL target configuration The target should show up on the Warpgate's homepage: PostgreSQL target on the homepage Users will be able to click the entry to obtain connection instructions: PostgreSQL target connection instructions","title":"Connection setup"},{"location":"targets/postgres/#client-setup","text":"You can now use any PostgreSQL client applications to connect through Warpgate with the following settings: Host: the Warpgate host Port: the Warpgate PostgreSQL port (default: 55432) Username: admin#<target-name> or admin:<target-name> , in this example: admin#db1 Password: your Warpgate admin password Tls enabled Cleartext password authentication: allowed If your client uses a database URL, use: postgresql://<username>#<target>:<password>@<warpgate host>:<warpgate postgresql port>?sslmode=require While your PostgreSQL session is running, you'll be able to see its status in the Admin UI, including the query log: PostgreSQL session log","title":"Client setup"},{"location":"targets/postgres/#2-factor-authentication","text":"v0.14+ Warpgate supports the \"In-browser auth\" authentication for PostgreSQL clients by sending a login link in a PostgreSQL notice message. Some clients might ignore notice messages, but the users will still be able see and confirm their login request if they log into the Warpgate web UI.","title":"2-factor authentication"},{"location":"targets/postgres/#up-next","text":"User authentication and roles","title":"Up next"},{"location":"targets/ssh/","text":"Adding SSH targets \u00a7 Authentication setup \u00a7 Preferred: public-key auth \u00a7 Warpgate has its own set of SSH keys which the target host must trust in order for connections to work. You can view these keys on the Config -> SSH keys page of the Admin UI, or via the warpgate client-keys CLI command: Warpgate's public keys $ warpgate client-keys 13:59:41 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 2, roles: 1) Warpgate SSH client keys: (add these to your target's authorized_keys file) ssh-ed25519 AAAAC3NzaC1lZDI1NTE[...]aM+3RBsT5 rsa-sha2-256 AAAADHJzYS[...] The keys are listed in the order of preference. Copy one of them and paste it at the end of the ~/.ssh/authorized_keys file on the other side (each target host OS' user has their own authorized_keys file and you will need to create it if it doesn't exist yet). Alternative: password authentication \u00a7 Although not recommended, you can use a password to authenticate against a target instead. Connection setup \u00a7 Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new target a name: Adding an SSH target Fill out the connection and authentication info and click Update configuration , for example: SSH target configuration The target should show up on the Warpgate homepage for users that are allowed to access it: SSH target on the start page Users will be able to click the entry to obtain connection instructions: SSH connection instructions Client setup \u00a7 Now, fire up your favorite SSH client and try connecting to Warpgate: Host: the Warpgate host Port: the Warpgate SSH port (default: 2222) Username: admin:<target-name> , in this example: admin:vm1 Password: your Warpgate admin password When connecting for the first time, Warpgate will ask you to check and confirm the target host's SSH host key fingerprint (which you really should do). Here's what it looks like with OpenSSH: $ ssh c.wilde:staging-env@warpgate.acme.inc c.wilde:staging-env@warpgate.acme.inc's password: Warpgate Selected target: staging-env Warpgate Host key (ssh-ed25519): AAAAC3[...] Warpgate There is no trusted ssh-ed25519 key for this host. Warpgate Trust this key? (y/n) \u2713 Warpgate connected root ~ $ From this point on, you can use this as a normal SSH connection, including SFTP etc. While your SSH session is running, you'll be able to see its status in the Admin UI: SSH session log Click the shell session entry in the Recordings section for a live view and replay of the terminal session: SSH session recording Up next \u00a7 User authentication and roles","title":"SSH"},{"location":"targets/ssh/#adding-ssh-targets","text":"","title":"Adding SSH targets"},{"location":"targets/ssh/#authentication-setup","text":"","title":"Authentication setup"},{"location":"targets/ssh/#preferred-public-key-auth","text":"Warpgate has its own set of SSH keys which the target host must trust in order for connections to work. You can view these keys on the Config -> SSH keys page of the Admin UI, or via the warpgate client-keys CLI command: Warpgate's public keys $ warpgate client-keys 13:59:41 INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 2, roles: 1) Warpgate SSH client keys: (add these to your target's authorized_keys file) ssh-ed25519 AAAAC3NzaC1lZDI1NTE[...]aM+3RBsT5 rsa-sha2-256 AAAADHJzYS[...] The keys are listed in the order of preference. Copy one of them and paste it at the end of the ~/.ssh/authorized_keys file on the other side (each target host OS' user has their own authorized_keys file and you will need to create it if it doesn't exist yet).","title":"Preferred: public-key auth"},{"location":"targets/ssh/#alternative-password-authentication","text":"Although not recommended, you can use a password to authenticate against a target instead.","title":"Alternative: password authentication"},{"location":"targets/ssh/#connection-setup","text":"Log into the Warpgate admin UI and navigate to Config > Targets > Add target and give the new target a name: Adding an SSH target Fill out the connection and authentication info and click Update configuration , for example: SSH target configuration The target should show up on the Warpgate homepage for users that are allowed to access it: SSH target on the start page Users will be able to click the entry to obtain connection instructions: SSH connection instructions","title":"Connection setup"},{"location":"targets/ssh/#client-setup","text":"Now, fire up your favorite SSH client and try connecting to Warpgate: Host: the Warpgate host Port: the Warpgate SSH port (default: 2222) Username: admin:<target-name> , in this example: admin:vm1 Password: your Warpgate admin password When connecting for the first time, Warpgate will ask you to check and confirm the target host's SSH host key fingerprint (which you really should do). Here's what it looks like with OpenSSH: $ ssh c.wilde:staging-env@warpgate.acme.inc c.wilde:staging-env@warpgate.acme.inc's password: Warpgate Selected target: staging-env Warpgate Host key (ssh-ed25519): AAAAC3[...] Warpgate There is no trusted ssh-ed25519 key for this host. Warpgate Trust this key? (y/n) \u2713 Warpgate connected root ~ $ From this point on, you can use this as a normal SSH connection, including SFTP etc. While your SSH session is running, you'll be able to see its status in the Admin UI: SSH session log Click the shell session entry in the Recordings section for a live view and replay of the terminal session: SSH session recording","title":"Client setup"},{"location":"targets/ssh/#up-next","text":"User authentication and roles","title":"Up next"}]}